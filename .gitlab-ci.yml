image: registry.gitlab.com/materials-modeling/icet:latest

stages:
  - build
  - test
  - deploy
  - pypi
  - conda

before_script:
  - INSTDIR=$PWD/opt/lib/python
  - export PYTHONPATH=$INSTDIR:$PYTHONPATH

.build:
  stage: build
  script:
    - mkdir -p $INSTDIR
    - python3 ./setup.py install --home=$PWD/opt
    - python3 setup.py sdist
  artifacts:
    expire_in: 14 days
    paths:
      - opt/
      - dist/

build:linux:
  extends: .build
  tags:
    - linux

build:macos:
  extends: .build
  tags:
    - macos

.tests:
  stage: test
  script:
    - xdoctest icet
    - xdoctest mchammer
    - coverage run tests/main.py
    - coverage report -m
    - coverage html
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    expire_in: 14 days
    paths:
      - htmlcov/
      - opt/
      - dist/


test:linux:
  extends: .tests
  needs:
    - build:linux
  tags:
    - linux

test:macos:
  extends: .tests
  needs:
    - build:macos
  tags:
    - macos

test_benchmarks_examples:
  stage: test
  only:
    - schedules
  tags:
    - linux
  dependencies:
    - build:linux
  script:
    - for f in benchmark/*.py; do python3 -u "$f"; done
    - pwd=`pwd`
    - |
      for dir in `find examples -name '*.py' | xargs gdirname | sort -uk1` ; do
        # echo "dir= $dir"
        cd $pwd
        cd $dir
        for file in `ls *.py | sort -gk1 | grep -v __ | grep -v parallel_monte_carlo` ; do
          echo "Running $file -- `date`"
          python3 $file
          echo "Finished running $file -- `date`"
        done
        echo
      done

style_check:
  stage: test
  tags:
    - linux
  script:
    - flake8 icet/ mchammer/ tests/ benchmark/ doc/ examples/


test_documentation:
  stage: test
  dependencies:
    - build:linux
  script:
    - mkdir public
    # C++ documentation (doxygen)
    - cd doc/apidoc/
    - doxygen Doxyfile
    - cd ../..
    - mv doc/apidoc/html/ public/apidoc/
    # check examples in documentation via doctest
    - sphinx-build -b doctest -W doc/userguide/source/ public/
    # user guide (sphinx)
    - sphinx-build -W doc/userguide/source/ public/
  except:
   - master
  artifacts:
    expire_in: 1 days
    paths:
      - public


pages:
  stage: deploy
  dependencies:
    - build:linux
    - test:linux
  script:
    # prepare homepage
    - mkdir -p public/dev
    # code coverage report (actually for the master master (=development version)
    # but that is the sensible one to show anyways)
    - mv htmlcov/ public/
    # --------------------------
    # STABLE VERSION
    - tag=$(git tag | tail -1)
    - echo "tag= $tag"
    - git checkout $tag
    # C++ documentation (doxygen)
    - cd doc/apidoc/
    - doxygen Doxyfile
    - cd ../..
    - mv doc/apidoc/html/ public/apidoc/
    # user guide (sphinx)
    - sphinx-build -W doc/userguide/source/ public/
    # make tests and examples downloadable
    - cd examples
    - find tutorial/ -print | zip ../public/tutorial.zip -@
    - find advanced_topics/ -print | zip ../public/advanced_topics.zip -@
    - cd ..
    - find tests/ -print | zip public/tests.zip tests/structure_databases/*.db -@
    # --------------------------
    # DEVELOPMENT VERSION
    - git checkout master
    - tag=$(git describe | tail -1)
    - echo "tag= $tag"
    # C++ documentation (doxygen)
    - cd doc/apidoc/
    - doxygen Doxyfile
    - cd ../..
    - mv doc/apidoc/html/ public/dev/apidoc/
    # build user guide
    - sed -i "s/version = ''/version = '$tag'/" doc/userguide/source/conf.py
    - grep version doc/userguide/source/conf.py
    - sphinx-build -W doc/userguide/source/ public/dev/
    # make tests and examples downloadable
    - cd examples
    - find tutorial/ -print | zip ../public/dev/tutorial.zip -@
    - find advanced_topics/ -print | zip ../public/dev/advanced_topics.zip -@
    - cd ..
    - find tests/ -print | zip public/dev/tests.zip tests/structure_databases/*.db -@
    # --------------------------
    # clean up
    - ls -l public/
    - chmod go-rwX -R public/
  artifacts:
    expire_in: 30 days
    paths:
      - public
  only:
    - master

pypi:
  stage: pypi
  image: registry.gitlab.com/ssavruk/icet/cicd_publish:0.1.0
  only:
    - tags
  needs:
    - test:linux
  script:
    - python3 -m twine upload dist/*

conda:linux:
  stage: conda
  dependencies: []
  variables:
    GIT_STRATEGY: none
  image: registry.gitlab.com/ssavruk/icet/cicd_conda:0.1.6
  tags:
    - linux
  only:
    - tags
  script:
    - BUILD_PATH=/opt/conda/conda-bld/linux-64
    - export PATH=/opt/conda/bin:/opt/conda/bin:/opt/conda/condabin:$PATH
    - rm -rf ./icet
    - echo yes | anaconda login --username $CONDA_USER --password $CONDA_PASSWORD
    - conda skeleton pypi icet --python 3.7
    - conda-build --python 3.7 icet
    - FILE_NAME=$(ls $BUILD_PATH | grep tar.bz2)
    - anaconda upload -u materials-modeling $BUILD_PATH/$FILE_NAME

conda:macos:
  stage: conda
  dependencies: []
  variables:
    GIT_STRATEGY: none
  image: registry.gitlab.com/ssavruk/icet/cicd_conda:0.1.6
  tags:
    - macos
  only:
    - tags
  script:
    - BUILD_PATH=~/conda-bld/osx-64
    - rm -rf ./icet
    - rm -rf ~/conda-bld/
    - echo yes | anaconda login --username $CONDA_USER --password $CONDA_PASSWORD
    - conda skeleton pypi icet --python 3.7
    - conda-build --python 3.7 icet
    - FILE_NAME=$(ls $BUILD_PATH | grep tar.bz2)
    - anaconda upload -u materials-modeling $BUILD_PATH/$FILE_NAME